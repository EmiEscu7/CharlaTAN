version: '2.0'
session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
intents:
- customizer_what_i_do_task
- customizer_what_i_do_meet
- customizer_what_i_do_both
- customizer_greet_meeting
- customizer_goodbye_meeting
- psybot_greet
- psybot_goodbye
- psybot_want_interview
- psybot_answer_yes
- psybot_answer_maybe_yes
- psybot_answer_undecided
- psybot_answer_maybe_no
- psybot_answer_no
- scrumassistant_affirm
- scrumassistant_deny
- scrumassistant_greet
- scrumassistant_goodbye
- scrumassistant_not_understand
- scrumassistant_explain_me_topic
- scrumassistant_need_example
- scrumassistant_change_current_flow
- wizzardprofessor_pregunta_concepto:
    use_entities: true
- wizzardprofessor_pregunta_atributos:
    use_entities: true
- wizzardprofessor_pregunta_patrones:
    use_entities: true
- wizzardprofessor_pregunta_patrones_poo:
    use_entities: true
- wizzardprofessor_explain_me_topic
- wizzardprofessor_affirm
- wizzardprofessor_deny
- wizzardprofessor_goodbye
- wizzardprofessor_greet
- wizzardprofessor_explicame_tema
- wizzardprofessor_need_example
- wizzardprofessor_change_current_flow
- wizzardprofessor_no_entiendo
slots:
  task:
    type: bool
    auto_fill: false
    influence_conversation: false
  meet:
    type: bool
    auto_fill: false
    influence_conversation: false
  what_i_do:
    type: text
    auto_fill: true
    influence_conversation: false
  question_to_ask:
    type: text
    initial_value: None
  tema:
    type: text
    initial_value: None
  next_topic:
    type: text
    initial_value: None
  must_set_timer:
    type: bool
    initial_value: false
  concepto:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  patron:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  atr_calidad:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
responses:
  utter_customizer_what_i_do_both_informal:
  - text: gato fui a la reunion {{1}} e hice la task {{0}}
  - text: 'maquina fui a la reunion {{1}} e hice la task {{0}} '
  - text: pa estuve con la task {{0}} y en la reunion {{1}}
  utter_customizer_what_i_do_task_informal:
  - text: Que onda gato, estuve trabajando con la task {{0}} bro
  - text: 'Broo que ondaa, anduve a full con la task {{0}} '
  - text: 'Labure a pleno con la task {{0}} '
  utter_customizer_what_i_do_meet_informal:
  - text: 'Gato, fui a la reunion {{0}} '
  - text: 'Broo, estuve en la reunion {{0}} '
  - text: 'Que onda man, anduve por la reunion {{0}} '
  utter_customizer_what_i_do_both_formal:
  - text: Logre asistir a la reunion {{1}} y realizar la task {{0}}
  - text: Pude asistir a la reunion {{1}} y centre mi trabajo en la task {{0}}
  - text: Centre mi tiempo en realizar task {{0}} y asistir a la reunion {{1}}
  utter_customizer_what_i_do_task_formal:
  - text: Mi trabajo estuvo centrado en la task {{0}}
  - text: Estuve trabajando con la tarea {{0}}
  - text: Me centre en la tarea {{0}}
  utter_customizer_what_i_do_meet_formal:
  - text: Decidi asistir a la reunion {{0}}
  - text: Logre asistir a la reunion {{0}}
  - text: He ido a la reunion {{0}}
  utter_customizer_what_i_do_both_comun:
  - text: Fui a la reunion {{1}} e hice la task {{0}}
  - text: Asisti a la reunion {{1}} y trabaje con la task {{0}}
  - text: Anduve haciendo la task {{0}} y fui a la reunion {{1}}
  utter_customizer_what_i_do_task_comun:
  - text: Me puse a hacer la task {{0}}
  - text: Anduve laburando con la task {{0}}
  - text: Estuve trabajando con la task{{0}}
  utter_customizer_what_i_do_meet_comun:
  - text: Fui a las reunion {{0}}
  - text: Estuve yendo a las reunion {{0}}
  - text: Pude ir a las reunion {{0}}
  utter_customizer_greet_meeting_formal:
  - text: Bueno. Comencemos con la daily meeting
  - text: Hola, empezamos con la daily meeting
  - text: Empezamos con la daily meeting
  utter_customizer_greet_meeting_comun:
  - text: Bien chicos, me alegra verlos. Empecemos con la daily meeting
  - text: Estamos todos? Empezemos con la daily meeting
  - text: Hola devs. Ya empezamos con la daily
  utter_customizer_greet_meeting_informal:
  - text: Que onda boys?? Empezamos ya mismo
  - text: Holanda muchachos. Espero que se encuentren joya. Empecemos con la daily
  - text: Ya estamos todos los boludos?? Empezemos!!
  utter_customizer_goodbye_meeting_formal:
  - text: Gracias por asistir a la runion. Pueden continuar con su trabajo
  - text: Muy bien, gracias por venir. Continuen con lo que estaban haciendo
  - text: Genial, sigan con su trabajo. Gracias por venir
  utter_customizer_goodbye_meeting_comun:
  - text: Bien chicos, ya pueden continuar con lo que venian haciendo
  - text: Perfecto muchachos. Sigan asi. Vienen bien. Continuen con lo que estaban haciendo
  - text: Continuen con su trabajo. Gracias por venir a la meeting
  utter_customizer_goodbye_meeting_informal:
  - text: Bien boys, gracias por venir. Sigan haciendo su trabajo que por algo les pago
  - text: Vamos devs a trabajar. Termino la reunion por hoy
  - text: A trabajaarrr, se termino lo lindo por hoy
  utter_psybot_presentation:
  - text: Hola, yo soy PsyBot, el encargado de analizar el comportamiento de los TeamMembers dentro de ScrumTalk.
  utter_psybot_interview_finished:
  - text: Ya no tengo mas preguntas para hacerte. Gracias por tu tiempo.
  utter_psybot_interview_not_started:
  - text: No podes responder a preguntas si todavia no empezo la entrevista.
  utter_scrumassistant_greet:
  - text: ¡Hola! Estoy aquí para guiarte en el proceso Scrum. ¿Querés realizar un recorrido?
  utter_scrumassistant_end_tour:
  - text: Eso es sería todo el recorrido por las distintas fases del proceso, ante cualquier duda que tengas sobre Scrum ya sabes donde encontrarme.
  utter_scrumassistant_goodbye:
  - text: Adiós!
  - text: Hasta pronto!
  utter_scrumassistant_start_tour:
  - text: Genial! Por favor acompáñame al hall así arrancamos el tour.
  utter_scrumassistant_ask_good:
  - text: Correcto ahi te va otra
  utter_scrumassistant_ask_bad:
  - text: Nono le errraste, es esto en realidad es
  utter_scrumassistant_default:
  - text: default
  utter_scrumassistant_sin_ejemplos:
  - text: No tengo mas ejemplos de este tema.
  utter_scrumassistant_no_examples:
  - text: Perdona, no te puedo resolver esa consulta.
  - text: No tengo un ejemplo para ese tema.
  - text: No tengo un ejemplo.
  utter_scrumassistant_sin_question:
  - text: No tengo mas preguntas para hacerte.
  utter_scrumassistant_ask:
  - text: Bueno ahora vamos con unas preguntas de estos temas para ver cuanto sabes
  utter_scrumassistant_cross_examine_jump_global:
  - text: Queres que explique desde ese tema y omitamos los temas intermedios o solo te explico ese tema particular
  utter_scrumassistant_cross_examine_jump_sequential:
  - text: Queres que te explique todo de nuevo apartir de ese tema o solo te explico de nuevo ese tema particular
  utter_scrumassistant_cross_examine_example:
  - text: Queres que te de un ejemplo de este tema o queres que te haga otra explicacion
  utter_scrumassistant_move_to_planning_room:
  - text: Por favor, acompañame a la sala de planning para continuar con el tour.
  - text: Por favor, acompañame a la sala de planning para continuar con el recorrido.
  - text: A continuación vamos a ir a la sala de planning, seguime por favor.
  - text: Acompañame que vamos a ir a la sala de planning.
  utter_scrumassistant_move_to_office:
  - text: Por favor, acompañame a la oficina para continuar con el tour.
  - text: Por favor, acompañame a la oficina para continuar con el recorrido.
  - text: A continuación vamos a ir a oficina, seguime por favor.
  - text: Acompañame que vamos a ir a la oficina.
  utter_scrumassistant_move_to_development_room:
  - text: Por favor, acompañame a la sala development para continuar con el tour.
  - text: Por favor, acompañame a la sala development para continuar con el recorrido.
  - text: A continuación vamos a ir a la sala development, seguime por favor.
  - text: A continuación vamos a ir a la sala development, seguime por favor.
  - text: Acompañame que vamos a ir a la sala development.
  utter_scrumassistant_move_to_meeting_room:
  - text: Una de las responsabilidades del Development Team es realizar las Daily Meetings, vamos a la sala de reuniones que en este momento esta ocurriendo una.
  utter_scrumassistant_move_to_kanban:
  - text: Por favor, acompañame hasta el Scrum Board.
  - text: Seguime hasta el Scrum Board, por favor.
  - text: Acompañame que vamos ver el Scrum Board.
  utter_scrumassistant_scrum:
  - text: En nuestro proyecto utilizamos el marco de trabajo Scrum, es un proceso en el que se aplican de manera regular un conjunto de buenas prácticas para trabajar colaborativamente, en equipo y obtener el mejor resultado posible de proyectos. A continuación vamos a realizar un recorrido por las distintas salas para que puedas ver que actividades se realizan en cada una de ellas y que artefactos se usan en cada etapa del proceso.
  utter_scrumassistant_sprint_planning_preview:
  - text: El Sprint Planning es una reunión que se realiza al comienzo de cada Sprint que sirve para inspeccionar el Product Backlog y que el equipo de desarrollo seleccione los Product Backlog Items en los que va a trabajar durante el siguiente Sprint. Este evento lo veremos mas adelante, por ahora sigamos con el tema {tema}.
  utter_scrumassistant_sprint_planning:
  - text: En esta sala se lleva a cabo el Sprint Planning, una reunión que se realiza al comienzo de cada Sprint donde participa el equipo Scrum al completo; sirve para inspeccionar el Product Backlog y que el equipo de desarrollo seleccione los Product Backlog Items en los que va a trabajar durante el siguiente Sprint. Estos Product Backlog Items son los que compondrán el Sprint Backlog.
  utter_scrumassistant_sprint_planning_2:
  - text: 'Durante el Sprint Planning, el Product Owner presenta el Product Backlog actualizado que el equipo de desarrollo se encarga de estimar, además de intentar clarificar aquellos ítems que crea necesarios. Este evento se divide en dos partes: en la primera parte de la reunión se trata Qué se va a hacer en el siguiente Sprint y, en la segunda parte, se discute el Cómo. La primera parte está organizada y liderada por el Product Owner, mientras que de la segunda parte se encarga el Development Team. Puede durar hasta 8 horas para Sprints de 4 semanas.'
  utter_scrumassistant_product_backlog_preview:
  - text: El Product Backlog es un inventario que contiene cualquier tipo de trabajo que haya que hacer en el producto, ese artefacto lo veremos más adelante. Por el momento sigamos con el tema {tema}.
  utter_scrumassistant_product_backlog:
  - text: 'El Product Backlog es un inventario que contiene cualquier tipo de trabajo que haya que hacer en el producto: requerimientos, casos de uso, tareas y dependencias.'
  utter_scrumassistant_product_backlog_2:
  - text: El Product Backlog es básicamente una lista, en cualquier formato, que contiene todos los requerimientos que necesitamos implementar en el producto. Es la principal fuente de información sobre el producto en Scrum.
  utter_scrumassistant_product_owner_preview:
  - text: El Product Owner, que es la persona que representa a los stakeholders, y a través del Product Backlog, gestiona el flujo de valor del producto.. Mas adelante vamos a profundizar en ese rol, por el momento sigamos con el tema {tema}.
  utter_scrumassistant_product_owner:
  - text: El Product Backlog es gestionado por el Product Owner, que representa a los stakeholders. Es el encargado de optimizar y maximizar el valor del producto, gestiona el flujo de valor del producto a través del Product Backlog.
  utter_scrumassistant_product_owner_2:
  - text: El Product Owner representa los stakeholders, estas son las personas que hacen posible el proyecto y para quienes el proyecto producirá el beneficio acordado que justifica su desarrollo, por ejemplo clientes, proveedores, etc. Es un rol que está muy pegado al negocio a través de los clientes o a personas que tienen relación con ellos, debe descubrir sus necesidades y buscar soluciones a las mismas. Para ello utiliza el Product Backlog, donde se detalla qué debe realizarse para cubrir esa necesidad.
  utter_scrumassistant_epic_preview:
  - text: Una Épica es un conjunto de trabajo grande que puede dividirse en historias de usuario en función de las necesidades o solicitudes de los clientes o usuarios finales. Este elemento lo veremos mas adelante en el tour, por el momento sigamos con el tema {tema}.
  utter_scrumassistant_epic:
  - text: Dentro del Product Backlog, los requerimientos del cliente se traducen a épicas que son un conjunto de trabajo grande que puede dividirse en historias de usuario en función de las necesidades o solicitudes de los clientes o usuarios finales.
  utter_scrumassistant_epic_2:
  - text: Una épica puede visualizarse como una historia de usuario que aún no se ha detallado, es demasiado grande o todavía presenta mucha incertidumbre y, por lo tanto, no se puede transformar en un incremento del producto. Debe dividirse en historias de usuario más pequeñas.
  utter_scrumassistant_epic_example:
  - text: "Supongamos que deseas entrar en un nuevo mercado, por ejemplo, el mercado de software de gestión de proyectos. Está seria tu iniciativa o tema de alto nivel. Este objetivo se puede desglosar en dos épicas: \nLa primera es desarrollar nuevas características para la gestión de proyectos Agile. \nY la segunda, mejorar nuestras características actuales para que sean adecuadas para los gerentes de proyecto."
  utter_scrumassistant_user_story_preview:
  - text: Una historia de usuario es la descripción funcional utilizada en las metodologías ágiles para especificar el desarrollo de una característica. Esto lo veremos mas adelante, ahora sigamos con el tema {tema}.
  utter_scrumassistant_user_story:
  - text: Como ya te mencioné, una épica puede dividirse en historias de usuario que son descripciones funcionales para especificar el desarrollo de una característica. Estas definen lo que se debe construir en el proyecto de software, tienen una prioridad asociada definida por el cliente de manera de indicar cuales son las más importantes para el resultado final.
  utter_scrumassistant_user_story_2:
  - text: "Las historias de usuario son descripciones cortas y simples de una característica contada desde la perspectiva de la persona que desea la nueva capacidad. Por lo general, siguen una plantilla simple: \n\t Como <perfil> quiero <algún objetivo> para que <motivo> \nEsta estructura no es obligatoria, pero resulta de ayuda para establecer una definición de Done. Cuando ese perfil puede alcanzar su valor deseado, la historia está completa."
  utter_scrumassistant_user_story_example:
  - text: "Por lo general, las historias de usuario siguen la siguiente plantilla: \n\t Como <perfil> quiero <algún objetivo> para que <motivo> \nPor ejemplo, pueden tener este aspecto: como usuario quiero buscar en las ofertas de trabajo para ver cuales me interesan."
  utter_scrumassistant_task_preview:
  - text: Las tareas son elementos técnicos necesarios para que una Historia de Usuario se transforme en un incremento del producto. Mas adelante veremos este elemento, ahora continuemos con el tema {tema}.
  utter_scrumassistant_task:
  - text: Para que las historias de usuario se transforme en un incremento del producto es necesario descomponerla en tareas o elementos técnicos para gestionarla y seguir el avance de su ejecución.
  utter_scrumassistant_task_2:
  - text: Una tarea no es parte del resultado del proyecto, es más bien el medio para producir el resultado. Las tareas son elementos técnicos necesarios para que una Historia de Usuario se transforme en un incremento del producto. Las historias de usuario se descomponen en tareas para gestionar y seguir el avance de su ejecución. Normalmente durante la reunión de Sprint Planning, el equipo de desarrollo se identifica y genera estas tareas técnica.
  utter_scrumassistant_task_example:
  - text: "Por ejemplo a la historia de usuario: Como usuario quiero buscar en las ofertas de trabajo para ver cuales me interesan, la podemos dividir en las tareas técnicas: \nCrear UI de presentación de resultados. \nCrear los métodos de consulta a BBDD para que retornen resultados. \nY mostrar un mensaje si no se encuentran resultados con los criterios de búsqueda."
  utter_scrumassistant_development_team_preview:
  - text: El Development Team es un grupo de personade que trabajan juntas para entregar los incrementos de productos requeridos en cada Sprint. Este rol lo veremos mas adelante, por el momento sigamos con el tema {tema}.
  utter_scrumassistant_development_team:
  - text: Durante el desarrollo del Sprint, el Development Team trabaja las tareas que se pueden visulizar en este tablero. Este grupo se auto-organiza y gestiona su propio trabajo a través del Scrum Board para transformar todos los ítems del Product Backlog en incrementos de desarrollo.
  utter_scrumassistant_development_team_2:
  - text: 'El Development Team es un grupo de personas que trabajan juntas para entregar los incrementos de productos requeridos en cada Sprint. Generalmente son entre 5 y 9 miembros. Son responsables de: Crear un plan para el Sprint, inculcar calidad al adherirse a una Defición de Done, adaptar su plan cada día hacia el objetivo del Sprint y responsabilizarse mutuamente como profesionales.'
  utter_scrumassistant_scrum_board_preview:
  - text: El Scrum Board es un tablero que sirve para oganizar la gestión del proyecto. Mas adelante te mostraré el tablero que utilizamos en este proyecto, por el momento sigamos con el tema {tema}.
  utter_scrumassistant_scrum_board:
  - text: El Scrum Board es utilizado por todo el equipo para organizar la gestión del proyecto. Cuenta con columnas que indican el estado de cada tarea necesaria para completar los elementos del Sprint Backlog. En nuestro proyecto, las tareas pueden estar por hacerse, en progreso o finalizadas.
  utter_scrumassistant_scrum_board_2:
  - text: "Cuenta con columnas que indican el estado de cada tarea y sirve para: \nDividir el proyecto en fases bien definidas. \nConocer la efectividad del equipo. \nMonitorear el desarrollo de las tareas, de acuerdo con los objetivos de cada iteración. \nAplicar cambios para obtener los resultados esperados. \nDinamizar la actividad. En nuestro caso, contamos con un tablero físico conformado por columnas con las tareas a realizar, las tareas en progreso y las tareas finalizadas."
  utter_scrumassistant_task_in_progress:
  - text: En la columna To Do se encuentran las tareas pendientes, cuando una persona del equipo de desarrollo comienza a trabajar en una tarea de esta columna debe moverla a In Progress de esta manera.
  utter_scrumassistant_task_done:
  - text: Cuando termina la tarea que tenia en progreso, debe asegurarse junto con el Product Owner que esa tarea cumpla con la Definción de Done, que es un documento con una serie de criterios para determinar cuando una tarea está completamente hecha. Luego, debe mover la tarea de In Progress a la columna Done de esta manera.
  utter_scrumassistant_interact_with_kanban:
  - text: Si queres podes probar a interactuar con el Kanban. Cuando quieras continuar con el tour, volve y hablame.
  utter_scrumassistant_development_room:
  - text: Este es el lugar donde trabajan los desarrolladores, para completar las tareas que te explique anteriormente.
  utter_scrumassistant_daily_meeting_preview:
  - text: Una Daily Meeting es una reunión de 15 minutos de duración, del equipo de desarrollo scrum. En la misma, sincronizan las actividades que están ocurriendo en el sprint, y la planificación de las actividades de las próximas 24 horas. Este evento lo veremos mas adelante, por ahora sigamos con el tema {tema}.
  utter_scrumassistant_daily_meeting:
  - text: "La Daily Scrum o Daily Meeting es una reunión diaria de 15 minutos. Durante la misma, cada una de las personas del Development Team responden a las siguientes preguntas: \n¿Qué hice ayer para contribuir al Sprint Goal? \n¿Qué voy a hacer hoy para contribuir al Sprint Goal? \n¿Tengo algún impedimento que me impida entregar? \nSu objetivo es evaluar diariamente el progreso y la tendencia del progreso hasta la finalización del Sprint, sincronizando las actividades y creando un plan para las próximas 24 horas. \nSi te parece bien quedate a presenciar la reunión y cuando quieras continuar con el recorrido avísame."
  utter_scrumassistant_sprint_review_preview:
  - text: El Sprint Review es una reunión que se realiza al final el Sprint, en la cual se revisa el incremento terminado. Esto lo veremos mas adelante, por el momento sigamos con el tema {tema}.
  utter_scrumassistant_sprint_review:
  - text: En esta sala también nos reunimos al final del Sprint para las etapas de revisión y retrospectiva. Durante el Sprint Review, se presenta a los stakeholders el incremento terminado para su inspección y adaptación correspondientes. Se estudia cuál es la situación y se actualiza el Product Backlog con las nuevas condiciones que puedan afectar al negocio.
  utter_scrumassistant_sprint_review_2:
  - text: Durante el Sprint Review, se revisará el incremento terminado. Se mostrará el software funcionando en producción y los stakeholders tendrán la oportunidad de hacer cuantas preguntas estimen oportunas sobre el mismo. El software funcionando ha sido validado previamente por el Product Owner, que se ha encargado de trabajar con el equipo durante el Sprint para asegurarse que cumple con la Definition of Done y, efectivamente, hace que el Sprint Goal sea válido. El equipo de desarrollo comenta posteriormente qué ha ocurrido durante el Sprint, los impedimentos que se han encontrado, así como soluciones tomadas y actualizan a los stakeholders con la situación del equipo. Por último, el Product Owner actualiza, con la información de negocio recibida en esta reunión, el Product Backlog para el siguiente Sprint.
  utter_scrumassistant_sprint_retrospective_preview:
  - text: La retropectiva es una reunión que se realiza al final del Sprint para inspeccionar el equipo y levantar mejoras que se apliquen en el siguiente Sprint. Este evento lo explicaré mas adelante, por ahora sigamos con el tema {tema}.
  utter_scrumassistant_sprint_retrospective:
  - text: Luego, hacemos una retrospectiva para reflexionar sobre el último Sprint e identificar posibles mejoras para el próximo.
  utter_scrumassistant_sprint_retrospective_2:
  - text: La retropectiva, en otras palabras, es una reunión que se realiza para inspeccionar el equipo y levantar mejoras que se apliquen en el siguiente Sprint. Un formato común es analizar qué ha ido bien durante el Sprint, qué ha fallado y qué se puede mejorar. Este formato se puede facilitar pidiendo a los miembros del equipo Scrum que escriban notas para luego agruparlas y votar aquellos ítems más relevantes, dando la oportunidad a todos de hablar y expresar sus inquietudes.
  utter_scrumassistant_scrum_master_preview:
  - text: El Scrum Master es el responsable de que Scrum sea entendido y bien aplicado dentro de la organización. Mas adelante te voy a comentar mas sobre este rol, por el momento sigamos con el tema {tema}.
  utter_scrumassistant_scrum_master:
  - text: "En esta sala trabaja el Scrum Master que es el responsable de que Scrum sea entendido y bien aplicado dentro de la organización. Tiene dos funciones principales dentro del marco de trabajo: gestionar el proceso Scrum y ayudar a eliminar impedimentos que puedan afectar a la entrega del producto. \nPor ejemplo, en las Daily Meetings se encarga de hacer cumplir el objetivo de la reunión, de que estén disponibles todos los recursos que se necesitan y que todas las voces sean escuchadas. Además, interviene si considera que no se están visibilizando realmente los impedimentos."
  utter_scrumassistant_scrum_master_2:
  - text: "El Scrum Master es un entrenador y facilitador de equipos Scrum. Para que entiendas que función cumple te voy a explicar sus dos funciones principales mas detalladamente: \nGestionar el proceso Scrum: el Scrum Master se encarga de gestionar y asegurar que el proceso Scrum se lleva a cabo correctamente, así como de facilitar la ejecución del proceso y sus mecánicas. \nEliminar impedimentos: esta función del Scrum Master indica la necesidad de ayudar a eliminar progresiva y constantemente impedimentos que van surgiendo en la organización y que afectan a su capacidad para entregar valor, así como a la integridad de esta metodología."
  utter_scrumassistant_cross_examine_topic_scrum:
  - text: Proceso Scrum es tomar Fernet
  utter_scrumassistant_cross_examine_topic_product_backlog:
  - text: Product Backlog es un llavero con tu nombre
  utter_scrumassistant_cross_examine_topic_product_owner:
  - text: Product owner es Product owner
  utter_scrumassistant_cross_examine_topic_epic:
  - text: Epica es Epica
  utter_scrumassistant_cross_examine_topic_scrum_master:
  - text: Scrum Master es Scrum Master
  utter_wizzardprofessor_greet:
  - text: "Hola, soy el Wizard y estoy para guiarte en el camino del diseño arquitectónico\n¿Querés iniciar la prueba?, Quizá no sepas nada..."
  utter_wizzardprofessor_goodbye:
  - text: Nos vemos pa
  utter_wizzardprofessor_sin_ejemplos:
  - text: No hay mas ejemplos sobre este tema
  utter_wizzardprofessor_sin_question:
  - text: No hay mas preguntas sobre este tema
  utter_wizzardprofessor_ask_good:
  - text: Correcto ahi te va otra
  utter_wizzardprofessor_ask_bad:
  - text: Nono le errraste, es esto en realidad es
  utter_wizzardprofessor_default:
  - text: default
  utter_wizzardprofessor_fin_test:
  - text: Terminaste el recorrido intelectual... Creo que ya estás apto para que hablemos de lo que sea.
  utter_wizzardprofessor_pregunta_concepto/patron:
  - text: "Los patrones arquitectónicos dan una descripción de los elementos y el tipo de relación que tienen juntocon un conjunto de restricciones sobre cómo pueden ser usados.\nUn patrón arquitectónico expresa un esquema de organización estructural esencial para un sistema de software, que consta de subsistemas, sus responsabilidades e interrelaciones.\nEn comparación con los patrones de diseño, los patrones arquitectónicos tienen un nivel de abstracción mayor."
  utter_wizzardprofessor_pregunta_concepto/patron_clarificacion:
  - text: Mirá, pensalos cómo las estructuras más utilizadas para resolver problemas muy comunes a la hora de diseñar la arquitectura de tu solución.
  utter_wizzardprofessor_pregunta_concepto/patrones_listado:
  - text: "Los patrones más comunes son:\nCapas (Layered), cliente_servidor (Client-server), maestro_esclavo (Master-slave), pipe_filter, Broker, peer_to_peer (P2P), event_bus, MVC, Blackboard, Interpreter"
  utter_wizzardprofessor_pregunta_concepto/scrum:
  - text: "La metodología Scrum es un framework que se utiliza dentro de equipos que manejan proyectos complejos.\n Es decir, se trata de una metodología de trabajo ágil que tiene como finalidad la entrega de valor en períodos cortos de tiempo y para ello se basa en tres pilares: la transparencia, inspección y adaptación."
  utter_wizzardprofessor_pregunta_concepto/scrum_clarificacion:
  - text: "Pensalo como un conjunto de reglas y prácticas para poder organizar el trabajo de mucha gente.\n Cada persona tiene un rol, con distintas personalidades y hay eventos importantes que agrupan distintos roles."
  utter_wizzardprofessor_pregunta_concepto/agil:
  - text: Las metodologías ágiles son un conjunto de métodos que permiten adaptar el modo de trabajo a las condiciones del proyecto, aportando flexibilidad, eficiencia y, por lo tanto, logrando un mejor producto a menor coste.
  utter_wizzardprofessor_pregunta_concepto/agil_clarificacion:
  - text: Pensalos cómo la manera de combinar la velocidad y creatividad con las estructuras tradicionales de las empresas grandes.
  utter_wizzardprofessor_pregunta_concepto/fdd:
  - text: "Feature-driven development (FDD) es un proceso para desarrollo de software de forma iterativa e incremental\n El proceso comienza por los requerimientos y el modelado, siguiendo por el diseño y construcción en base a incrementos"
  utter_wizzardprofessor_pregunta_concepto/atr_calidad:
  - text: Los atributos de calidad (también cualidades del software) son características no funcionales que se consideran deseables en un sistema de software.
  - text: Un atributo de calidad es una propiedad medible de un sistema, que indica qué tan bien el sistema satisface las necesidades de las partes interesadas.
  utter_wizzardprofessor_pregunta_concepto/hook:
  - text: "Hooking es un concepto que permite modificar el comportamiento de un programa.\n Es la posibilidad que proporciona el código de cambiar comportamiento original sin modificar código de la clase correspondiente.\n Esto se realiza sobreescribiendo los métodos hook."
  utter_wizzardprofessor_pregunta_concepto/req_func:
  - text: Los requerimientos funcionales de un sistema son aquellos que describen cualquier actividad/servicio que éste deba realizar.
  utter_wizzardprofessor_pregunta_concepto/req_func_ejemplo:
  - text: "Un ejemplo de requerimiento funcional, sería:\n El sistema permitirá a los usuarios autorizados ingresar planes y cronogramas de proyecto"
  - text: "Por ejemplo,\n El sistema permitirá el envío automatizado de cartas de entrega de órdenes directamente al almacén."
  utter_wizzardprofessor_pregunta_concepto/req_no_func:
  - text: Los requerimientos no funcionales representan características generales y restricciones de la aplicación o sistema que se esté desarrollando.
  - text: "Se trata de requisitos que no se refieren directamente a las funciones específicas suministradas por el sistema (características de usuario), sino a las propiedades del sistema:\n rendimiento, seguridad, disponibilidad."
  utter_wizzardprofessor_pregunta_concepto/req_no_func_ejemplo:
  - text: "Por ejemplo,\n Todas las comunicaciones externas entre los servidores de datos, la aplicación y el cliente del sistema  deben estar cifradas utilizando el algoritmo RSA.\n Es un ejemplo de RNF que puede encasillarse en el atributo de calidad de Seguridad."
  utter_wizzardprofessor_pregunta_concepto/diferencia_req_func_no_func:
  - text: Un requisito funcional describe lo que debe hacer un sistema, mientras que los requisitos no funcionales imponen restricciones sobre cómo lo hará el sistema.
  utter_wizzardprofessor_pregunta_patrones/capas:
  - image: https://miro.medium.com/max/376/1*jMWk_JqqyyloVPhTs_Zd1A.png
    text: "Este patrón se puede utilizar para estructurar programas que se pueden descomponer en grupos de subtareas, cada una de las cuales se encuentra en un nivel particular de abstracción.\n Cada capa proporciona servicios a la siguiente capa superior.\n\n Las 4 capas más comúnmente encontradas de un sistema de información general son las siguientes:\n Capa de presentación, Capa de aplicación, Capa de lógica de negocios, Capa de acceso a datos."
  utter_wizzardprofessor_pregunta_patrones/cliente_servidor:
  - image: https://miro.medium.com/max/568/1*4xX_WQQuD2u0PMK5bcWFkQ.png
    text: "Este patrón consiste en dos partes; un servidor y múltiples clientes.\n El componente del servidor proporcionará servicios a múltiples componentes del cliente.\n Los clientes solicitan servicios del servidor y el servidor proporciona servicios relevantes a esos clientes.\n Además, el servidor sigue escuchando las solicitudes de los clientes."
  utter_wizzardprofessor_pregunta_patrones/maestro_esclavo:
  - image: https://miro.medium.com/max/1084/1*lsK9QntZl2d5oLojwRGXDg.png
    text: "Este patrón consiste en dos partes; maestro y esclavos.\n El componente maestro distribuye el trabajo entre componentes esclavos idénticos y calcula el resultado  final de los resultados que devuelven los esclavos."
  utter_wizzardprofessor_pregunta_patrones/pipe_filter:
  - image: https://miro.medium.com/max/1400/1*qikehZcDhhl_wWsqeI_nvg.png
    text: "Este patrón se puede usar para estructurar sistemas que producen y procesan una secuencia de datos.\n Cada paso de procesamiento se incluye dentro de un componente de filtro.\n Los datos que se procesarán se pasan a través de las tuberías.\n Estas tuberías se pueden utilizar para el almacenamiento en búfer o con fines de sincronización."
  utter_wizzardprofessor_pregunta_patrones/broker:
  - image: https://miro.medium.com/max/1400/1*1qRQZjLRAd0yY_T9p2OgBw.png
    text: "Este patrón se usa para estructurar sistemas distribuidos con componentes desacoplados.\n Estos componentes pueden interactuar entre sí mediante invocaciones de servicios remotos.\n Un componente de intermediario es responsable de la coordinación de la comunicación entre los componentes."
  utter_wizzardprofessor_pregunta_patrones/peer_to_peer:
  - image: https://miro.medium.com/max/520/1*ROvkckSTw1UncrbQSmUJUQ.png
    text: "En este patrón, los componentes individuales se conocen como pares.\n Los pares pueden funcionar tanto como un cliente, solicitando servicios de otros pares, y como un servidor, proporcionando servicios a otros pares.\n Un par puede actuar como un cliente o como un servidor o como ambos, y puede cambiar su rol dinámicamente con el tiempo."
  utter_wizzardprofessor_pregunta_patrones/event_bus:
  - image: https://miro.medium.com/max/1264/1*DOZ4nVR9zkJm-EnXT3KOGQ.png
    text: "Este patrón trata principalmente con eventos y tiene 4 componentes principales: \n fuente de evento, escucha de evento, canal y bus de evento.\n\n Las fuentes publican mensajes en canales particulares en un bus de eventos.\n Los oyentes se suscriben a canales particulares.\n Los oyentes son notificados de los mensajes que se publican en un canal al que se han suscrito anteriormente."
  utter_wizzardprofessor_pregunta_patrones/mvc:
  - image: https://miro.medium.com/max/1400/1*OP0CS6O5Sb66jpc-H-IuRQ.png
    text: "Este patrón, también conocido como patrón MVC, divide una aplicación interactiva en 3 partes, como:\n Modelo: contiene la funcionalidad y los datos básicos,\n Vista: muestra la información al usuario (se puede definir más de una vista),\n Controlador: maneja la entrada del usuario.\n\n Esto se hace para separar las representaciones internas de información de las formas en que se presenta y acepta la información del usuario.\n Desacopla los componentes y permite la reutilización eficiente del código."
  utter_wizzardprofessor_pregunta_patrones/blackboard:
  - image: https://miro.medium.com/max/1060/1*ArbMx7A21I47llvwUTiSDg.png
    text: "Este patrón es útil para problemas para los que no se conocen estrategias de solución deterministas.\n El patrón de pizarra consta de 3 componentes principales:\n Pizarra: una memoria global estructurada que contiene objetos del espacio de solución,\n Fuente de conocimiento: módulos especializados con su propia representación,\n Componente de control: selecciona, configura y ejecuta módulos.\n\n Todos los componentes tienen acceso a la pizarra.\n Los componentes pueden producir nuevos objetos de datos que se agregan a la pizarra.\n Los componentes buscan tipos particulares de datos en la pizarra, y pueden encontrarlos por coincidencia de patrones con la fuente de conocimiento existente."
  utter_wizzardprofessor_pregunta_patrones/interpreter:
  - image: https://miro.medium.com/max/1320/1*DrC3T5R4SsdcQY6aXLCRZA.png
    text: "Este patrón se usa para diseñar un componente que interpreta programas escritos en un lenguaje dedicado.\n Especifica principalmente cómo evaluar las líneas de programas, conocidas como oraciones o expresiones escritas en un idioma particular.\n La idea básica es tener una clase para cada símbolo del idioma."
  utter_wizzardprofessor_pregunta_concepto/patrones_poo:
  - text: "Los patrones de diseño son soluciones habituales a problemas que ocurren con frecuencia en el diseño de software.\nSon como planos prefabricados que se pueden personalizar para resolver un problema de diseño recurrente en tu código."
  utter_wizzardprofessor_pregunta_patrones_poo/abstract_factory:
  - text: Abstract Factory es un patrón de diseño creacional que nos permite producir familias de objetos relacionados sin especificar sus clases concretas.
  utter_wizzardprofessor_pregunta_patrones_poo/factory_method:
  - text: Factory Method es un patrón de diseño creacional que proporciona una interfaz para crear objetos en una superclase, mientras permite a las subclases alterar el tipo de objetos que se crearán.
  utter_wizzardprofessor_pregunta_patrones_poo/builder:
  - text: "Builder es un patrón de diseño creacional que nos permite construir objetos complejos paso a paso.\n El patrón nos permite producir distintos tipos y representaciones de un objeto empleando el mismo código de construcción."
  utter_wizzardprofessor_pregunta_patrones_poo/prototype:
  - text: Prototype es un patrón de diseño creacional que nos permite copiar objetos existentes sin que el código dependa de sus clases.
  utter_wizzardprofessor_pregunta_patrones_poo/singleton:
  - text: Singleton es un patrón de diseño creacional que nos permite asegurarnos de que una clase tenga una única instancia, a la vez que proporciona un punto de acceso global a dicha instancia.
  utter_wizzardprofessor_pregunta_patrones_poo/adapter:
  - text: Adapter es un patrón de diseño estructural que permite la colaboración entre objetos con interfaces incompatibles.
  utter_wizzardprofessor_pregunta_patrones_poo/bridge:
  - text: Bridge es un patrón de diseño estructural que te permite dividir una clase grande, o un grupo de clases estrechamente relacionadas, en dos jerarquías separadas (abstracción e implementación) que pueden desarrollarse independientemente la una de la otra.
  utter_wizzardprofessor_pregunta_patrones_poo/composite:
  - text: Composite es un patrón de diseño estructural que te permite componer objetos en estructuras de árbol y trabajar con esas estructuras como si fueran objetos individuales.
  utter_wizzardprofessor_pregunta_patrones_poo/decorator:
  - text: Decorator es un patrón de diseño estructural que te permite añadir funcionalidades a objetos colocando estos objetos dentro de objetos encapsuladores especiales que contienen estas funcionalidades.
  utter_wizzardprofessor_pregunta_patrones_poo/facade:
  - text: Facade es un patrón de diseño estructural que proporciona una interfaz simplificada a una biblioteca, un framework o cualquier otro grupo complejo de clases.
  utter_wizzardprofessor_pregunta_patrones_poo/flyweight:
  - text: Flyweight es un patrón de diseño estructural que te permite mantener más objetos dentro de la cantidad disponible de RAM, compartiendo las partes comunes del estado entre varios objetos, en lugar de mantener toda la información en cada objeto.
  utter_wizzardprofessor_pregunta_patrones_poo/proxy:
  - text: "Proxy es un patrón de diseño estructural que te permite proporcionar un sustituto o marcador de posición para otro objeto.\n Un proxy controla el acceso al objeto original, permitiéndote hacer algo antes o después de que la solicitud llegue al objeto original."
  utter_wizzardprofessor_pregunta_patrones_poo/chain_of_responsibility:
  - text: "Chain of Responsibility es un patrón de diseño de comportamiento que te permite pasar solicitudes a lo largo\n de una cadena de manejadores.\n Al recibir una solicitud, cada manejador decide si la procesa o si la pasa al siguiente manejador de la cadena."
  utter_wizzardprofessor_pregunta_patrones_poo/command:
  - text: "Command es un patrón de diseño de comportamiento que convierte una solicitud en un objeto independiente\n que contiene toda la información sobre la solicitud.\n Esta transformación te permite parametrizar los métodos con diferentes solicitudes, retrasar o poner en cola la ejecución de una solicitud y soportar operaciones que no se pueden realizar."
  utter_wizzardprofessor_pregunta_patrones_poo/memento:
  - text: Memento es un patrón de diseño de comportamiento que te permite guardar y restaurar el estado previo de un objeto sin revelar los detalles de su implementación.
  utter_wizzardprofessor_pregunta_patrones_poo/iterator:
  - text: Iterator es un patrón de diseño de comportamiento que te permite recorrer elementos de una colección sin exponer su representación subyacente (lista, pila, árbol, etc.).
  utter_wizzardprofessor_pregunta_patrones_poo/mediator:
  - text: "Mediator es un patrón de diseño de comportamiento que te permite reducir las dependencias caóticas entre objetos.\n El patrón restringe las comunicaciones directas entre los objetos, forzándolos a colaborar únicamente a través de un objeto mediador."
  utter_wizzardprofessor_pregunta_patrones_poo/observer:
  - text: Observer es un patrón de diseño de comportamiento que te permite definir un mecanismo de suscripción para notificar a varios objetos sobre cualquier evento que le suceda al objeto que están observando.
  utter_wizzardprofessor_pregunta_patrones_poo/state:
  - text: "State es un patrón de diseño de comportamiento que permite a un objeto alterar su comportamiento cuando su estado interno cambia.\n Parece como si el objeto cambiara su clase."
  utter_wizzardprofessor_pregunta_patrones_poo/strategy:
  - text: Strategy es un patrón de diseño de comportamiento que te permite definir una familia de algoritmos, colocar cada uno de ellos en una clase separada y hacer sus objetos intercambiables.
  utter_wizzardprofessor_pregunta_patrones_poo/template_method:
  - text: Template Method es un patrón de diseño de comportamiento que define el esqueleto de un algoritmo en la  superclase pero permite que las subclases sobrescriban pasos del algoritmo sin cambiar su estructura.
  utter_wizzardprofessor_pregunta_patrones_poo/visitor:
  - text: Visitor es un patrón de diseño de comportamiento que te permite separar algoritmos de los objetos sobre los que operan.
  utter_wizzardprofessor_pregunta_atributos/listado:
  - text: "Los atributos de calidad son:\n Tolerancia a Fallos, Disponiilidad, Mantenibilidad, Performance, Escalabilidad, Seguridad, Usabilidad, Portabilidad e Interoperabilidad"
  utter_wizzardprofessor_pregunta_atributos/tolerancia_a_fallos:
  - text: La tolerancia a fallos, es la capacidad del sistema o componente para operar según lo previsto en presencia de fallos hardware o software.
  utter_wizzardprofessor_pregunta_atributos/tolerancia_a_fallos_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Tolerancia a fallos puede ser:\n El producto tendrá tolerancia a fallas mediante el uso de técnicas de recuperación, transacciones compensatorias y enrutamiento en caso de fallas."
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Tolerancia a fallos puede ser:\n Debe ser posible que se trate de forma independiente una falla de software del sistema"
  utter_wizzardprofessor_pregunta_atributos/disponibilidad:
  - text: Capacidad del sistema o componente de estar operativo y accesible para su uso cuando se requiere.
  utter_wizzardprofessor_pregunta_atributos/disponibilidad_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Disponibilidad puede ser:\n Es relevante que el sistema este disponible las 24 horas del día durante todo el año"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Disponibilidad puede ser:\n El sistema debe estar inactivo un tiempo relativamente corto por año."
  utter_wizzardprofessor_pregunta_atributos/mantenibilidad:
  - text: Esta característica representa la capacidad del producto software para ser modificado efectiva y eficientemente, debido a necesidades evolutivas, correctivas o perfectivas.
  utter_wizzardprofessor_pregunta_atributos/mantenibilidad_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Mantenibilidad puede ser:\n Los componentes del sistema deben poder intercambiarse sin afectar el funcionamiento del programa"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Mantenibilidad puede ser:\n El sistema debe ser fácil de actualizar"
  utter_wizzardprofessor_pregunta_atributos/performance:
  - text: Esta característica representa el desempeño relativo a la cantidad de recursos utilizados bajo determinadas condiciones
  utter_wizzardprofessor_pregunta_atributos/performance_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Performance puede ser:\n Es importante que el sistema traiga resultados de búsqueda en un tiempo aceptable"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Performance puede ser:\n El tiempo de espera para que un usuario navegue de una pantalla será inmediato"
  utter_wizzardprofessor_pregunta_atributos/escalabilidad:
  - text: Es la capacidad de un sistema para funcionar bien cuando se presentan cambios en la demanda o en la carga del mismo.
  utter_wizzardprofessor_pregunta_atributos/escalabilidad_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Escalabilidad puede ser:\n El producto debe ser capaz de soportar y administrar 1000 usuarios simultáneos y remotos"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Escalabilidad puede ser:\n El sistema de manejo de cuentas debera soportar un número ilimitado de clientes, cuentas y transacciones"
  utter_wizzardprofessor_pregunta_atributos/seguridad:
  - text: Capacidad de protección de la información y los datos de manera que personas o sistemas no autorizados no puedan leerlos o modificarlos.
  utter_wizzardprofessor_pregunta_atributos/seguridad_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Seguridad puede ser:\n Es importante que el sistema traiga autorización de usuarios y almacenamiento seguro de contraseñas"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Seguridad puede ser:\n No se introducirán datos inválidos en el sistema"
  utter_wizzardprofessor_pregunta_atributos/usabilidad:
  - text: Es la capacidad del producto software para ser entendido, aprendido, usado y resultar atractivo para el usuario, cuando se usa bajo determinadas condiciones.
  utter_wizzardprofessor_pregunta_atributos/usabilidad_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Usabilidad puede ser:\n Es importante que el sistema sea intuitivo y de fácil comprensión"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Usabilidad puede ser:\n La navegación debe diseñarse para ayudar a los usuarios a comprender dónde se encuentran, dónde han estado y adónde pueden ir a continuación"
  utter_wizzardprofessor_pregunta_atributos/portabilidad:
  - text: Es la capacidad del producto o componente de ser transferido de forma efectiva y eficiente de un entorno hardware, software, operacional o de utilización a otro
  utter_wizzardprofessor_pregunta_atributos/portabilidad_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Portabilidad puede ser:\n El sistema debe funcionar en más de una plataforma móvil (Android, iOS)"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Portabilidad puede ser:\n El producto debe correr en más de un sistema operativo (Windows, Linux, macOS)"
  utter_wizzardprofessor_pregunta_atributos/interoperabilidad:
  - text: Es la capacidad de dos o más sistemas o componentes para intercambiar información y/o llevar a cabo sus funciones requeridas cuando comparten el mismo entorno hardware o software
  utter_wizzardprofessor_pregunta_atributos/interoperabilidad_ejemplo:
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Interoperabilidad puede ser:\n El producto debe tener la capacidad de interpretar correctamente los datos que se intercambian"
  - text: "Por ejemplo, un requerimiento no funcional que se encasilla en Interoperabilidad puede ser:\n El sistema debe poder comunicarse fácilmente con otros servicios"
  utter_wizzardprofessor_pregunta_concepto/fdd_clarificacion:
  - text: Te lo explico con otras palabras... fdd es un metodologia agil para el desarrollo de sistemas que incluye el monitoreo constante de porceso
  utter_wizzardprofessor_pregunta_concepto/atr_calidad_clarificacion:
  - text: Y mira, los atributos de calidad son aspectos importates impotantes de la arquitectura de software, indica que tan bien el sistema satisface las necesidades de las partes interesadas
  utter_wizzardprofessor_pregunta_concepto/hook_clarificacion:
  - text: Hooking se utiliza para muchos propósitos, incluyendo la depuración de programas y la ampliación de la funcionalidad
  utter_wizzardprofessor_pregunta_concepto/req_func_clarificacion:
  - text: Es importante saber que un requisito funcional define una función del sistema de software o sus componentes.
  utter_wizzardprofessor_pregunta_concepto/req_no_func_clarificacion:
  - text: 'Se trata de requisitos que no se refieren directamente a las funciones específicas suministradas por el sistema (características de usuario), sino a las propiedades del sistema: rendimiento, seguridad, disponibilidad.'
  utter_wizzardprofessor_pregunta_concepto/diferencia_req_func_no_func_clarificacion:
  - text: "En resumen, el requisito funcional es describir el comportamiento del sistema en relación con la funcionalidad del sistema.\n El requisito no funcional elabora una característica de rendimiento del sistema."
  utter_wizzardprofessor_pregunta_atributos/tolerancia_a_fallos_clarificacion:
  - text: "Un diseño tolerante a fallos es un sistema que está capacitado para continuar su funcionamiento cuando\n algún componente del sistema falla"
  utter_wizzardprofessor_pregunta_atributos/disponibilidad_clarificacion:
  - text: En pocas palabras, la disponibilidad es la proporción de tiempo que un sistema está en condiciones de funcionamiento.
  utter_wizzardprofessor_pregunta_atributos/mantenibilidad_clarificacion:
  - text: "La mantenibilidad se refiere a la facilidad con que se pueden ejecutar las tareas de gestión de mantenimiento\n del sistema"
  utter_wizzardprofessor_pregunta_atributos/performance_clarificacion:
  - text: En pocas palabras, desempeño con respecto al rendimiento de una computadora, un dispositivo,  un sistema operativo, un programa o una conexión a una red
  utter_wizzardprofessor_pregunta_atributos/escalabilidad_clarificacion:
  - text: Se entiende por escalabilidad a la capacidad de adaptación y respuesta de un sistema
  utter_wizzardprofessor_pregunta_atributos/seguridad_clarificacion:
  - text: Es la medida sobre la habilidad del sistema para resistir usos no autorizados mientras sigue proveyendo sus servicios a los usuarios legítimos.
  utter_wizzardprofessor_pregunta_atributos/usabilidad_clarificacion:
  - text: Simplificando, es el grado de facilidad del sistema para ser operado
  utter_wizzardprofessor_pregunta_atributos/portabilidad_clarificacion:
  - text: Resumiendo, es el grado en el que los datos tienen atributos que les permiten ser instalados,  reemplazados o eliminados de un sistema a otro
  utter_wizzardprofessor_pregunta_atributos/interoperabilidad_clarificacion:
  - text: En pocas palabras, el atrbutos de calidad interoperabilidad es responsable del funcionamiento y la transmisión de datos y su intercambio con otros sistemas externos
  utter_wizzardprofessor_pregunta_concepto/scrum_ejemplo:
  - text: "Un ejemplo del uso de Scrum es Spotify, ya que dieron mucha importancia al rol del Scrum Master y al del Product Owner.\n Gracias a esta metodología, descubrieron y entendieron las necesidades reales de los clientes y realizaron un buen trabajo de equipo coordinándose en la empresa."
  utter_wizzardprofessor_pregunta_concepto/agil_ejemplo:
  - text: "Existen diferentes opciones como Scrum, Kanban, entre otras;\n todas ellas se guían a través de un patrón establecido por el Manifiesto Ágil"
  utter_wizzardprofessor_pregunta_concepto/fdd_ejemplo:
  - text: ' '
  utter_wizzardprofessor_pregunta_concepto/hook_ejemplo:
  - text: Hay varios ejemplos, como incluir la interceptación de mensajes de eventos de teclado o de ratón antes  de que lleguen a una aplicación o interceptar llamadas de sistema operativo para supervisar el comportamiento o modificar la función de una aplicación u otro componente.
  utter_wizzardprofessor_pregunta_concepto/diferencia_req_func_no_func_ejemplo:
  - text: "Los requisitos no funcionales a veces se definen en términos de métricas es decir,  algo que se puede medir sobre el sistema para hacerlos más tangibles.\n Los requisitos no funcionales también pueden describir aspectos del sistema que no se relacionan con su ejecución,  sino con su evolución a lo largo del tiempo, por ejemplo, mantenibilidad, extensibilidad, documentación, etc."
  utter_wizzardprofessor_pregunta_concepto/diseño:
  - text: "Se lo define como el proceso de aplicar ciertas técnicas y principios con el propósito de definir un dispositivo, un proceso o un Sistema, con suficientes detalles como para permitir su interpretación y realización física.\n El Diseño de Software cuenta con distintas etapas, pero podemos resaltar la etapa del Diseño Arquitectónico, que describe la estructura y el comportamiento del Software consigo mismo, con los sistemas que operan junto con el y con los usuarios que lo emplean."
  utter_wizzardprofessor_pregunta_concepto/diseño_ejemplo:
  - text: Hay miles de ejemplos, te puedo ayudar a diseñar! Así armamos tu propio diseño, puede ser el de diseño de sistemas de operaciones, páginas web, dispositivos móviles y mas!
  utter_wizzardprofessor_pregunta_concepto/diseño_clarificacion:
  - text: En otras palabras y muy muy breve, es el proceso de definición de la arquitectura, módulos, interfaces y datos de un sistema para satisfacer unos requisitos previamente especificados.
  utter_wizzardprofessor_start_tour:
  - text: Genial! Por favor acompáñame al hall así arrancamos el tour.
  utter_wizzardprofessor_move_to_planning_room:
  - text: Por favor, acompañame a la sala de planning para continuar con el tour.
  - text: Por favor, acompañame a la sala de planning para continuar con el recorrido.
  - text: A continuación vamos a ir a la sala de planning, seguime por favor.
  - text: Acompañame que vamos a ir a la sala de planning.
  utter_wizzardprofessor_move_to_development_room:
  - text: Por favor, acompañame a la sala development para continuar con el tour.
  - text: Por favor, acompañame a la sala development para continuar con el recorrido.
  - text: A continuación vamos a ir a la sala development, seguime por favor.
  - text: A continuación vamos a ir a la sala development, seguime por favor.
  - text: Acompañame que vamos a ir a la sala development.
  utter_wizzardprofessor_move_to_meeting_room:
  - text: Una de las responsabilidades del Development Team es realizar las Daily Meetings, vamos a la sala de reuniones que en este momento esta ocurriendo una.
  utter_wizzardprofessor_daily_meeting:
  - text: "La Daily Scrum o Daily Meeting es una reunión diaria de 15 minutos. Durante la misma, cada una de las personas del Development Team responden a las siguientes preguntas: \n¿Qué hice ayer para contribuir al Sprint Goal? \n¿Qué voy a hacer hoy para contribuir al Sprint Goal? \n¿Tengo algún impedimento que me impida entregar? \nSu objetivo es evaluar diariamente el progreso y la tendencia del progreso hasta la finalización del Sprint, sincronizando las actividades y creando un plan para las próximas 24 horas. \nSi te parece bien quedate a presenciar la reunión y cuando quieras continuar con el recorrido avísame."
  utter_wizzardprofessor_move_to_kanban:
  - text: Por favor, acompañame hasta el Scrum Board.
  - text: Seguime hasta el Scrum Board, por favor.
  - text: Acompañame que vamos ver el Scrum Board.
  utter_wizzardprofessor_interact_with_kanban:
  - text: Si queres podes probar a interactuar con el Kanban. Cuando quieras continuar con el tour, volve y hablame.
  utter_wizzardprofessor_move_to_office:
  - text: Por favor, acompañame a la oficina para continuar con el tour.
  - text: Por favor, acompañame a la oficina para continuar con el recorrido.
  - text: A continuación vamos a ir a oficina, seguime por favor.
  - text: Acompañame que vamos a ir a la oficina.
  utter_wizzardprofessor_cross_examine_example:
  - text: Queres que te de un ejemplo de este tema o queres que te haga otra explicacion
  utter_wizzardprofessor_ask:
  - text: Bueno ahora vamos con unas preguntas de estos temas para ver cuanto sabes
  utter_wizzardprofessor_cross_examine_jump:
  - text: Queres que te explique a partir de un tema particular?
  utter_wizzardprofessor_cross_examine:
  - text: Queres que te explique solo ese tema
  utter_wizzardprofessor_cross_examine_jump_sequential:
  - text: Queres que te explique todo de nuevo apartir de ese tema o solo te explico de nuevo ese tema particular
  utter_wizzardprofessor_cross_examine_jump_global:
  - text: Queres que explique desde ese tema y omitamos los temas intermedios o solo te explico ese tema particular
actions:
- action_ask_again
- action_ask_question
- action_interview_not_started
- action_default_fallback
- action_set_timer
- action_topic_not_recognized
